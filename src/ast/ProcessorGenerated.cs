// ======================================================================
// Base Processor/Visitor class, auto-generated							
// 	Do NOT edit this file												
// 	Aditional methods should be defined in another file					
// ======================================================================
using System;
using System.Collections.Generic;
using System.Text;

namespace crosspascal.ast
{
	public abstract partial class Processor
	{
		//	Complete interface to be implemented by any specific AST processor	
		
		public virtual void Visit(Node node)
		{
		}
				
		public virtual void Visit(GoalNode node)
		{
		}
				
		public virtual void Visit(Statement node)
		{
		}
				
		public virtual void Visit(AssignementStatement node)
		{
			traverse(node.lvalue);
			traverse(node.expr);
		}
				
		public virtual void Visit(GotoStatement node)
		{
			traverse(node.gotolabel);
		}
				
		public virtual void Visit(IfStatement node)
		{
			traverse(node.condition);
			traverse(node.ifTrue);
			traverse(node.ifFalse);
		}
				
		public virtual void Visit(InheritedStatement node)
		{
			traverse(node.body);
		}
				
		public virtual void Visit(OnStatement node)
		{
			traverse(node.ident);
			traverse(node.type);
			traverse(node.body);
		}
				
		public virtual void Visit(OnListNode node)
		{
			traverse(node.stmt);
			traverse(node.next);
		}
				
		public virtual void Visit(ExceptionBlockNode node)
		{
			traverse(node.stmts);
			traverse(node.onElse);
		}
				
		public virtual void Visit(RaiseStatement node)
		{
			traverse(node.lvalue);
			traverse(node.expr);
		}
				
		public virtual void Visit(CaseLabel node)
		{
			traverse(node.minRange);
			traverse(node.maxRange);
		}
				
		public virtual void Visit(CaseLabelList node)
		{
			traverse(node.caselabel);
			traverse(node.next);
		}
				
		public virtual void Visit(CaseSelectorNode node)
		{
			traverse(node.list);
			traverse(node.stmt);
		}
				
		public virtual void Visit(CaseSelectorList node)
		{
		}
				
		public virtual void Visit(CaseStatement node)
		{
			traverse(node.condition);
			traverse(node.selectors);
			traverse(node.caseelse);
		}
				
		public virtual void Visit(RepeatStatement node)
		{
			traverse(node.condition);
			traverse(node.block);
		}
				
		public virtual void Visit(WhileStatement node)
		{
			traverse(node.condition);
			traverse(node.block);
		}
				
		public virtual void Visit(CallConventionNode node)
		{
		}
				
		public virtual void Visit(LiteralNode node)
		{
		}
				
		public virtual void Visit(DeclarationNode node)
		{
		}
				
		public virtual void Visit(UnfinishedNode node)
		{
		}
				
		public virtual void Visit(IntegerLiteralNode node)
		{
		}
				
		public virtual void Visit(CharLiteralNode node)
		{
		}
				
		public virtual void Visit(StringLiteralNode node)
		{
		}
				
		public virtual void Visit(BoolLiteralNode node)
		{
		}
				
		public virtual void Visit(RealLiteralNode node)
		{
		}
				
		public virtual void Visit(NilLiteralNode node)
		{
		}
				
		public virtual void Visit(PropertyReadNode node)
		{
			traverse(node.ident);
		}
				
		public virtual void Visit(PropertyWriteNode node)
		{
			traverse(node.ident);
		}
				
		public virtual void Visit(PropertySpecifierNode node)
		{
			traverse(node.read);
			traverse(node.write);
		}
				
		public virtual void Visit(FileType node)
		{
			traverse(node.type);
		}
				
		public virtual void Visit(LabelNode node)
		{
		}
				
		public virtual void Visit(StringLabel node)
		{
			traverse(node.name);
		}
				
		public virtual void Visit(NumberLabel node)
		{
		}
				
		public virtual void Visit(LabelDeclarationNode node)
		{
			traverse(node.label);
			traverse(node.next);
		}
				
		public virtual void Visit(ExportItem node)
		{
			traverse(node.ident);
			traverse(node.index);
		}
				
		public virtual void Visit(ExportItemListNode node)
		{
			traverse(node.export);
			traverse(node.next);
		}
				
		public virtual void Visit(TypeDeclarationNode node)
		{
			traverse(node.ident);
			traverse(node.type);
		}
				
		public virtual void Visit(TypeDeclarationListNode node)
		{
			traverse(node.decl);
			traverse(node.next);
		}
				
		public virtual void Visit(ProcedureTypeDeclarationNode node)
		{
			traverse(node.dirs);
		}
				
		public virtual void Visit(ParameterQualifierNode node)
		{
		}
				
		public virtual void Visit(ConstParameterQualifier node)
		{
		}
				
		public virtual void Visit(VarParameterQualifier node)
		{
		}
				
		public virtual void Visit(OutParameterQualifier node)
		{
		}
				
		public virtual void Visit(ParameterNode node)
		{
			traverse(node.idlist);
			traverse(node.type);
			traverse(node.qualifier);
			traverse(node.init);
		}
				
		public virtual void Visit(ParameterNodeList node)
		{
			traverse(node.param);
			traverse(node.next);
		}
				
		public virtual void Visit(PointerType node)
		{
		}
				
		public virtual void Visit(IntegerType node)
		{
		}
				
		public virtual void Visit(FloatingPointType node)
		{
		}
				
		public virtual void Visit(FloatType node)
		{
		}
				
		public virtual void Visit(DoubleType node)
		{
		}
				
		public virtual void Visit(ExtendedType node)
		{
		}
				
		public virtual void Visit(CurrencyType node)
		{
		}
				
		public virtual void Visit(CharType node)
		{
		}
				
		public virtual void Visit(BoolType node)
		{
		}
				
		public virtual void Visit(UnsignedInt8Type node)
		{
		}
				
		public virtual void Visit(UnsignedInt16Type node)
		{
		}
				
		public virtual void Visit(UnsignedInt32Type node)
		{
		}
				
		public virtual void Visit(UnsignedInt64Type node)
		{
		}
				
		public virtual void Visit(SignedInt8Type node)
		{
		}
				
		public virtual void Visit(SignedInt16Type node)
		{
		}
				
		public virtual void Visit(SignedInt32Type node)
		{
		}
				
		public virtual void Visit(SignedInt64Type node)
		{
		}
				
		public virtual void Visit(StringType node)
		{
			traverse(node.size);
		}
				
		public virtual void Visit(LValueNode node)
		{
			traverse(node.ident);
		}
				
		public virtual void Visit(StatementBlock node)
		{
			traverse(node.stmt);
			traverse(node.next);
		}
				
		public virtual void Visit(WithStatement node)
		{
			traverse(node.body);
			traverse(node.with);
		}
				
		public virtual void Visit(ForStatement node)
		{
			traverse(node.body);
			traverse(node.var);
			traverse(node.start);
			traverse(node.end);
		}
				
		public virtual void Visit(TryFinallyStatement node)
		{
			traverse(node.body);
			traverse(node.final);
		}
				
		public virtual void Visit(TryExceptStatement node)
		{
			traverse(node.body);
			traverse(node.final);
		}
				
		public virtual void Visit(OperatorNode node)
		{
		}
				
		public virtual void Visit(ExpressionNode node)
		{
		}
				
		public virtual void Visit(ExpressionListNode node)
		{
			traverse(node.exp);
			traverse(node.next);
		}
				
		public virtual void Visit(EnumList node)
		{
			traverse(node.element);
			traverse(node.next);
		}
				
		public virtual void Visit(FieldInit node)
		{
			traverse(node.ident);
			traverse(node.expr);
		}
				
		public virtual void Visit(FieldInitList node)
		{
			traverse(node.init);
			traverse(node.next);
		}
				
		public virtual void Visit(ClassFieldList node)
		{
			traverse(node.decl);
			traverse(node.next);
		}
				
		public virtual void Visit(ClassContent node)
		{
		}
				
		public virtual void Visit(ClassContentList node)
		{
			traverse(node.content);
			traverse(node.next);
		}
				
		public virtual void Visit(ClassMethod node)
		{
			traverse(node.decl);
		}
				
		public virtual void Visit(ClassProperty node)
		{
		}
				
		public virtual void Visit(ClassStruct node)
		{
			traverse(node.fields);
			traverse(node.content);
		}
				
		public virtual void Visit(ClassDefinition node)
		{
			traverse(node.heritage);
			traverse(node.classStruct);
		}
				
		public virtual void Visit(InterfaceDefinition node)
		{
			traverse(node.heritage);
			traverse(node.methods);
			traverse(node.properties);
		}
				
		public virtual void Visit(NegationNode node)
		{
			traverse(node.exp);
		}
				
		public virtual void Visit(AddressNode node)
		{
			traverse(node.exp);
		}
				
		public virtual void Visit(ArrayAccessNode node)
		{
			traverse(node.lvalue);
			traverse(node.acessors);
		}
				
		public virtual void Visit(PointerDereferenceNode node)
		{
			traverse(node.expr);
		}
				
		public virtual void Visit(TypeNode node)
		{
		}
				
		public virtual void Visit(TypeCastNode node)
		{
			traverse(node.expr);
			traverse(node.type);
		}
				
		public virtual void Visit(ProcedureCallNode node)
		{
			traverse(node.function);
			traverse(node.arguments);
		}
				
		public virtual void Visit(FieldAcessNode node)
		{
			traverse(node.obj);
			traverse(node.field);
		}
				
		public virtual void Visit(IdentifierListNode node)
		{
			traverse(node.ident);
			traverse(node.next);
		}
				
		public virtual void Visit(VarDeclarationOption node)
		{
		}
				
		public virtual void Visit(VariableInitNode node)
		{
			traverse(node.expr);
		}
				
		public virtual void Visit(VariableAbsoluteNode node)
		{
			traverse(node.ident);
		}
				
		public virtual void Visit(VarDeclarationNode node)
		{
			traverse(node.ids);
			traverse(node.type);
			traverse(node.option);
		}
				
		public virtual void Visit(VarDeclarationList node)
		{
			traverse(node.vardecl);
			traverse(node.next);
		}
				
		public virtual void Visit(ConstDeclarationNode node)
		{
			traverse(node.ident);
			traverse(node.expr);
			traverse(node.type);
		}
				
		public virtual void Visit(ConstDeclarationList node)
		{
			traverse(node.constdecl);
			traverse(node.next);
		}
				
		public virtual void Visit(AssemblerListNode node)
		{
			traverse(node.next);
		}
				
		public virtual void Visit(ProcedureHeaderNode node)
		{
			traverse(node.ident);
			traverse(node.returnType);
			traverse(node.parameters);
			traverse(node.directives);
		}
				
		public virtual void Visit(ProcedureBodyNode node)
		{
			traverse(node.decls);
			traverse(node.body);
		}
				
		public virtual void Visit(AssemblerProcedureBodyNode node)
		{
			traverse(node.asm);
		}
				
		public virtual void Visit(ProcedureDefinitionNode node)
		{
			traverse(node.header);
			traverse(node.body);
		}
				
		public virtual void Visit(ProcedureDirective node)
		{
		}
				
		public virtual void Visit(ProcedureDirectiveList node)
		{
			traverse(node.dir);
			traverse(node.next);
		}
				
		public virtual void Visit(ExternalProcedureDirective node)
		{
			traverse(node.importLib);
		}
				
		public virtual void Visit(ProcedurePointerDeclarationNode node)
		{
			traverse(node.ids);
			traverse(node.proc);
			traverse(node.dirs);
		}
				
		public virtual void Visit(UnaryOperationNode node)
		{
			traverse(node.a);
			traverse(node.op);
		}
				
		public virtual void Visit(BinaryOperationNode node)
		{
			traverse(node.a);
			traverse(node.b);
			traverse(node.op);
		}
				
		public virtual void Visit(IdentifierNode node)
		{
		}
				
		public virtual void Visit(IdentifierNodeWithLocation node)
		{
		}
				
		public virtual void Visit(UsesNode node)
		{
			traverse(node.ident);
			traverse(node.next);
		}
				
		public virtual void Visit(BlockWithDeclarationsNode node)
		{
			traverse(node.decls);
			traverse(node.block);
		}
				
		public virtual void Visit(ProgramNode node)
		{
			traverse(node.identifier);
			traverse(node.body);
			traverse(node.uses);
		}
				
		public virtual void Visit(LibraryNode node)
		{
			traverse(node.identifier);
			traverse(node.body);
			traverse(node.uses);
		}
				
		public virtual void Visit(DeclarationListNode node)
		{
			traverse(node.decl);
			traverse(node.next);
		}
				
		public virtual void Visit(UnitInterfaceNode node)
		{
			traverse(node.uses);
			traverse(node.decls);
		}
				
		public virtual void Visit(UnitImplementationNode node)
		{
			traverse(node.uses);
			traverse(node.decls);
		}
				
		public virtual void Visit(UnitInitialization node)
		{
			traverse(node.initialization);
			traverse(node.finalization);
		}
				
		public virtual void Visit(UnitNode node)
		{
			traverse(node.identifier);
			traverse(node.interfce);
			traverse(node.implementation);
			traverse(node.init);
		}
				
		public virtual void Visit(PackageNode node)
		{
			traverse(node.identifier);
			traverse(node.requires);
			traverse(node.contains);
		}
				
		public virtual void Visit(SetElement node)
		{
			traverse(node.min);
			traverse(node.max);
		}
				
		public virtual void Visit(SetList node)
		{
			traverse(node.element);
			traverse(node.next);
		}
	}
}
