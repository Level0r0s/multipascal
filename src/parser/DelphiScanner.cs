/* The following code was generated by CSFlex 1.4 on 04-03-2014 */

#line 1 "DelphiLex.l"
using System;
using System.Collections;
using System.IO;
using System.Text;

namespace crosspascal.parser
{

/**
 * Delphi Lexer
 * Generated by C# Flex, based on <a href="http://www.jflex.de/">JFlex</a>.
 */
 

#line default
class DelphiScanner: Token, yyParser.yyInput {
  /** This character denotes the end of file */
  public const int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private const int ZZ_BUFFERSIZE = 16384;
  /**
   * This is used in 'if' statements to eliminate dead code
   * warnings for 'break;' after the end of a user action
   * block of code. The Java version does this by emitting
   * a second 'case' which is impossible to reach. Since this
   * is impossible for the compiler to deduce during semantic
   * analysis, the warning is stifled. However, C# does not
   * permit 'case' blocks to flow into each other, so the C#
   * output mode needs a different approach. In this case,
   * the entire user code is wrapped up in an 'if' statement
   * whose condition is always true. No warning is emitted
   * because the compiler doesn't strictly propagate the value
   * of 'static readonly' fields, and thus does not semantically
   * detect the fact that the 'if' will always be true.
   */
   public static readonly bool ZZ_SPURIOUS_WARNINGS_SUCK = true;

  /** lexical states */
  public const int XCOMMENT2 = 2;
  public const int ASMCODESEC = 3;
  public const int XCOMMENT1 = 1;
  public const int YYINITIAL = 0;
  static DelphiScanner()
  {
    ZZ_ACTION = zzUnpackAction();
    ZZ_ROWMAP = zzUnpackRowMap();
    ZZ_TRANS = zzUnpackTrans();
    ZZ_ATTRIBUTE = zzUnpackAttribute();
  }


  /** 
   * Translates characters to character classes
   */
  private static readonly char[] ZZ_CMAP = new char[] {
    (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char)29, (char)31, (char) 0, (char) 0, (char)29, (char) 0, (char) 0, 
    (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, 
    (char)29, (char) 0, (char) 0, (char)37, (char)33, (char) 0, (char) 0, (char)36, (char)41, (char)43, (char)49, (char)35, (char)39, (char)47, (char)34, (char)48, 
    (char)32, (char)32, (char)32, (char)32, (char)27, (char)32, (char)26, (char)32, (char)28, (char)32, (char)38, (char)30, (char)50, (char)44, (char)51, (char) 0, 
    (char)45, (char) 5, (char) 3, (char)18, (char)21, (char)15, (char)17, (char)12, (char)23, (char) 2, (char)20, (char)22, (char) 1, (char)13, (char) 8, (char)11, 
    (char)10, (char)52, (char) 4, (char)14, (char) 9, (char) 7, (char)24, (char)25, (char)16, (char) 6, (char)19, (char)40, (char) 0, (char)42, (char)46, (char)52, 
    (char) 0, (char) 5, (char) 3, (char)18, (char)21, (char)15, (char)17, (char)12, (char)23, (char) 2, (char)20, (char)22, (char) 1, (char)13, (char) 8, (char)11, 
    (char)10, (char)52, (char) 4, (char)14, (char) 9, (char) 7, (char)24, (char)25, (char)16, (char) 6, (char)19, (char)53, (char) 0, (char)54, (char) 0, (char) 0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static readonly int [] ZZ_ACTION;

  private static readonly ushort[] ZZ_ACTION_PACKED_0 = new ushort[] {
    4, 0, 1, 1, 21, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 1,
    1, 7, 1, 8, 2, 1, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13,
    1, 14, 1, 15, 1, 16, 1, 17, 1, 18, 1, 19, 1, 20, 1, 21,
    1, 22, 1, 23, 1, 24, 1, 25, 1, 26, 1, 27, 1, 28, 1, 27,
    2, 29, 1, 30, 1, 31, 3, 2, 1, 32, 1, 2, 1, 33, 1, 34,
    8, 2, 1, 35, 1, 36, 7, 2, 1, 37, 9, 2, 1, 38, 1, 2,
    1, 39, 1, 40, 26, 2, 1, 41, 6, 2, 2, 0, 1, 42, 1, 43,
    2, 0, 1, 44, 1, 45, 1, 0, 1, 46, 1, 47, 1, 48, 1, 49,
    1, 50, 1, 51, 1, 0, 1, 52, 1, 0, 21, 2, 1, 53, 1, 54,
    5, 2, 1, 55, 1, 56, 1, 57, 14, 2, 1, 58, 2, 2, 1, 59,
    6, 2, 1, 60, 1, 61, 1, 62, 2, 2, 1, 63, 3, 2, 1, 64,
    4, 2, 1, 65, 8, 2, 1, 66, 6, 2, 1, 67, 4, 2, 1, 68,
    1, 0, 1, 69, 1, 70, 1, 71, 1, 72, 2, 0, 9, 2, 1, 73,
    4, 2, 1, 74, 10, 2, 1, 75, 1, 2, 1, 76, 1, 77, 1, 78,
    1, 2, 1, 79, 14, 2, 1, 80, 7, 2, 1, 81, 3, 2, 1, 82,
    6, 2, 1, 83, 2, 2, 1, 84, 1, 2, 1, 85, 8, 2, 1, 86,
    1, 2, 1, 87, 1, 2, 1, 0, 1, 88, 1, 89, 1, 2, 1, 90,
    6, 2, 1, 91, 3, 2, 1, 92, 1, 93, 8, 2, 1, 94, 4, 2,
    1, 95, 11, 2, 1, 96, 16, 2, 1, 97, 2, 2, 1, 98, 2, 2,
    1, 99, 1, 100, 10, 2, 1, 101, 1, 102, 1, 0, 3, 2, 1, 103,
    7, 2, 1, 104, 1, 105, 2, 2, 1, 106, 5, 2, 1, 107, 7, 2,
    1, 108, 1, 109, 1, 2, 1, 110, 2, 2, 1, 111, 3, 2, 1, 112,
    1, 2, 1, 113, 6, 2, 1, 114, 1, 115, 8, 2, 1, 116, 1, 117,
    7, 2, 1, 118, 1, 119, 3, 2, 1, 120, 2, 2, 1, 121, 10, 2,
    1, 122, 2, 2, 1, 123, 2, 2, 1, 124, 5, 2, 1, 125, 5, 2,
    1, 126, 1, 127, 2, 2, 1, 128, 3, 2, 1, 129, 2, 2, 1, 130,
    1, 131, 1, 132, 2, 2, 1, 133, 5, 2, 1, 134, 1, 2, 1, 135,
    1, 136, 1, 2, 1, 137, 2, 2, 1, 138, 1, 2, 1, 139, 3, 2,
    1, 140, 1, 141, 1, 142, 1, 143, 1, 144, 1, 145, 1, 2, 1, 146,
    1, 147, 1, 2, 1, 148, 1, 149, 1, 150, 4, 2, 1, 151, 1, 2,
    1, 152, 1, 153, 4, 2, 1, 154, 1, 155, 1, 156, 1, 157, 1, 158,
    11, 2, 1, 159, 1, 160, 3, 2, 1, 161, 1, 162, 1, 163, 2, 2,
    1, 164, 1, 2, 1, 165, 1, 2, 1, 166, 3, 2, 1, 167, 3, 2,
    1, 168, 1, 169, 1, 170, 0 };

  private static int [] zzUnpackAction() {
    int [] result = new int[616];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(ushort[] packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.Length;
    while (i + 1 < l) {
      int count = packed[i++];
      int value = packed[i++];
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static readonly int [] ZZ_ROWMAP;

  private static readonly ushort[] ZZ_ROWMAP_PACKED_0 = new ushort[] {
    0, 0, 0, 55, 0, 110, 0, 165, 0, 220, 0, 0x0113, 0, 0x014a, 0, 0x0181,
    0, 0x01b8, 0, 0x01ef, 0, 0x0226, 0, 0x025d, 0, 0x0294, 0, 0x02cb, 0, 0x0302, 0, 0x0339,
    0, 0x0370, 0, 0x03a7, 0, 0x03de, 0, 0x0415, 0, 0x044c, 0, 0x0483, 0, 0x04ba, 0, 0x04f1,
    0, 0x0528, 0, 0x055f, 0, 0x0596, 0, 0x05cd, 0, 220, 0, 220, 0, 0x0604, 0, 0x063b,
    0, 220, 0, 0x0672, 0, 0x06a9, 0, 0x06e0, 0, 220, 0, 220, 0, 0x0717, 0, 220,
    0, 220, 0, 220, 0, 220, 0, 220, 0, 220, 0, 0x074e, 0, 220, 0, 0x0785,
    0, 0x07bc, 0, 0x07f3, 0, 220, 0, 220, 0, 220, 0, 220, 0, 220, 0, 0x082a,
    0, 220, 0, 0x0861, 0, 0x0898, 0, 220, 0, 0x08cf, 0, 0x0906, 0, 0x093d, 0, 0x0974,
    0, 0x09ab, 0, 0x0226, 0, 0x0226, 0, 0x09e2, 0, 0x0a19, 0, 0x0a50, 0, 0x0a87, 0, 0x0abe,
    0, 0x0af5, 0, 0x0b2c, 0, 0x0b63, 0, 0x0226, 0, 0x0b9a, 0, 0x0bd1, 0, 0x0c08, 0, 0x0c3f,
    0, 0x0c76, 0, 0x0cad, 0, 0x0ce4, 0, 0x0d1b, 0, 0x0226, 0, 0x0d52, 0, 0x0d89, 0, 0x0dc0,
    0, 0x0df7, 0, 0x0e2e, 0, 0x0e65, 0, 0x0e9c, 0, 0x0ed3, 0, 0x0f0a, 0, 0x0226, 0, 0x0f41,
    0, 0x0226, 0, 0x0226, 0, 0x0f78, 0, 0x0faf, 0, 0x0fe6, 0, 0x101d, 0, 0x1054, 0, 0x108b,
    0, 0x10c2, 0, 0x10f9, 0, 0x1130, 0, 0x1167, 0, 0x119e, 0, 0x11d5, 0, 0x120c, 0, 0x1243,
    0, 0x127a, 0, 0x12b1, 0, 0x12e8, 0, 0x131f, 0, 0x1356, 0, 0x138d, 0, 0x13c4, 0, 0x13fb,
    0, 0x1432, 0, 0x1469, 0, 0x14a0, 0, 0x14d7, 0, 0x150e, 0, 0x1545, 0, 0x157c, 0, 0x15b3,
    0, 0x15ea, 0, 0x1621, 0, 0x1658, 0, 0x168f, 0, 0x16c6, 0, 0x0604, 0, 220, 0, 0x16fd,
    0, 0x1734, 0, 0x176b, 0, 0x17a2, 0, 0x17d9, 0, 220, 0, 220, 0, 0x1810, 0, 220,
    0, 220, 0, 220, 0, 0x1847, 0, 220, 0, 0x187e, 0, 0x18b5, 0, 0x18ec, 0, 0x1923,
    0, 0x195a, 0, 0x1991, 0, 0x19c8, 0, 0x19ff, 0, 0x1a36, 0, 0x1a6d, 0, 0x1aa4, 0, 0x1adb,
    0, 0x1b12, 0, 0x1b49, 0, 0x1b80, 0, 0x1bb7, 0, 0x1bee, 0, 0x1c25, 0, 0x1c5c, 0, 0x1c93,
    0, 0x1cca, 0, 0x1d01, 0, 0x0226, 0, 0x0226, 0, 0x1d38, 0, 0x1d6f, 0, 0x1da6, 0, 0x1ddd,
    0, 0x1e14, 0, 0x0226, 0, 0x0226, 0, 0x0226, 0, 0x1e4b, 0, 0x1e82, 0, 0x1eb9, 0, 0x1ef0,
    0, 0x1f27, 0, 0x1f5e, 0, 0x1f95, 0, 0x1fcc, 0, 0x2003, 0, 0x203a, 0, 0x2071, 0, 0x20a8,
    0, 0x20df, 0, 0x2116, 0, 0x0226, 0, 0x214d, 0, 0x2184, 0, 0x0226, 0, 0x21bb, 0, 0x21f2,
    0, 0x2229, 0, 0x2260, 0, 0x2297, 0, 0x22ce, 0, 0x0226, 0, 0x0226, 0, 0x0226, 0, 0x2305,
    0, 0x233c, 0, 0x0226, 0, 0x2373, 0, 0x23aa, 0, 0x23e1, 0, 0x0226, 0, 0x2418, 0, 0x244f,
    0, 0x2486, 0, 0x24bd, 0, 0x24f4, 0, 0x252b, 0, 0x2562, 0, 0x2599, 0, 0x25d0, 0, 0x2607,
    0, 0x263e, 0, 0x2675, 0, 0x26ac, 0, 0x0226, 0, 0x26e3, 0, 0x271a, 0, 0x2751, 0, 0x2788,
    0, 0x27bf, 0, 0x27f6, 0, 0x282d, 0, 0x2864, 0, 0x289b, 0, 0x28d2, 0, 0x2909, 0, 0x2940,
    0, 0x2940, 0, 0x2977, 0, 220, 0, 220, 0, 0x17d9, 0, 0x29ae, 0, 0x29e5, 0, 0x2a1c,
    0, 0x2a53, 0, 0x2a8a, 0, 0x2ac1, 0, 0x2af8, 0, 0x2b2f, 0, 0x2b66, 0, 0x2b9d, 0, 0x2bd4,
    0, 0x0226, 0, 0x2c0b, 0, 0x2c42, 0, 0x2c79, 0, 0x2cb0, 0, 0x2ce7, 0, 0x2d1e, 0, 0x2d55,
    0, 0x2d8c, 0, 0x2dc3, 0, 0x2dfa, 0, 0x2e31, 0, 0x2e68, 0, 0x2e9f, 0, 0x2ed6, 0, 0x2f0d,
    0, 0x0226, 0, 0x2f44, 0, 0x0226, 0, 0x0226, 0, 0x0226, 0, 0x2f7b, 0, 0x0226, 0, 0x2fb2,
    0, 0x2fe9, 0, 0x3020, 0, 0x3057, 0, 0x308e, 0, 0x30c5, 0, 0x30fc, 0, 0x3133, 0, 0x316a,
    0, 0x31a1, 0, 0x31d8, 0, 0x320f, 0, 0x3246, 0, 0x327d, 0, 0x0226, 0, 0x32b4, 0, 0x32eb,
    0, 0x3322, 0, 0x3359, 0, 0x3390, 0, 0x33c7, 0, 0x33fe, 0, 0x0226, 0, 0x3435, 0, 0x346c,
    0, 0x34a3, 0, 0x0226, 0, 0x34da, 0, 0x3511, 0, 0x3548, 0, 0x357f, 0, 0x35b6, 0, 0x35ed,
    0, 0x0226, 0, 0x3624, 0, 0x365b, 0, 0x0226, 0, 0x3692, 0, 0x0226, 0, 0x36c9, 0, 0x3700,
    0, 0x3737, 0, 0x376e, 0, 0x37a5, 0, 0x37dc, 0, 0x3813, 0, 0x384a, 0, 0x0226, 0, 0x3881,
    0, 0x0226, 0, 0x38b8, 0, 0x38ef, 0, 220, 0, 220, 0, 0x3926, 0, 0x0226, 0, 0x395d,
    0, 0x3994, 0, 0x39cb, 0, 0x3a02, 0, 0x3a39, 0, 0x3a70, 0, 0x0226, 0, 0x3aa7, 0, 0x3ade,
    0, 0x3b15, 0, 0x0226, 0, 0x0226, 0, 0x3b4c, 0, 0x3b83, 0, 0x3bba, 0, 0x3bf1, 0, 0x3c28,
    0, 0x3c5f, 0, 0x3c96, 0, 0x3ccd, 0, 0x0226, 0, 0x3d04, 0, 0x3d3b, 0, 0x3d72, 0, 0x3da9,
    0, 0x0226, 0, 0x3de0, 0, 0x3e17, 0, 0x3e4e, 0, 0x3e85, 0, 0x3ebc, 0, 0x3ef3, 0, 0x3f2a,
    0, 0x3f61, 0, 0x3f98, 0, 0x3fcf, 0, 0x4006, 0, 0x0226, 0, 0x403d, 0, 0x4074, 0, 0x40ab,
    0, 0x40e2, 0, 0x4119, 0, 0x4150, 0, 0x4187, 0, 0x41be, 0, 0x41f5, 0, 0x422c, 0, 0x4263,
    0, 0x429a, 0, 0x42d1, 0, 0x4308, 0, 0x433f, 0, 0x4376, 0, 0x0226, 0, 0x43ad, 0, 0x43e4,
    0, 0x0226, 0, 0x441b, 0, 0x4452, 0, 0x4489, 0, 0x0226, 0, 0x44c0, 0, 0x44f7, 0, 0x452e,
    0, 0x4565, 0, 0x459c, 0, 0x45d3, 0, 0x460a, 0, 0x4641, 0, 0x4678, 0, 0x46af, 0, 0x0226,
    0, 0x46e6, 0, 0x46e6, 0, 0x471d, 0, 0x4754, 0, 0x478b, 0, 0x0226, 0, 0x47c2, 0, 0x47f9,
    0, 0x4830, 0, 0x4867, 0, 0x489e, 0, 0x48d5, 0, 0x490c, 0, 0x0226, 0, 0x0226, 0, 0x4943,
    0, 0x497a, 0, 0x0226, 0, 0x49b1, 0, 0x49e8, 0, 0x4a1f, 0, 0x4a56, 0, 0x4a8d, 0, 0x0226,
    0, 0x4ac4, 0, 0x4afb, 0, 0x4b32, 0, 0x4b69, 0, 0x4ba0, 0, 0x4bd7, 0, 0x4c0e, 0, 0x0226,
    0, 0x0226, 0, 0x4c45, 0, 0x0226, 0, 0x4c7c, 0, 0x4cb3, 0, 0x0226, 0, 0x4cea, 0, 0x4d21,
    0, 0x4d58, 0, 0x0226, 0, 0x4d8f, 0, 0x0226, 0, 0x4dc6, 0, 0x4dfd, 0, 0x4e34, 0, 0x4e6b,
    0, 0x4ea2, 0, 0x4ed9, 0, 0x4f10, 0, 0x0226, 0, 0x4f47, 0, 0x4f7e, 0, 0x4fb5, 0, 0x4fec,
    0, 0x5023, 0, 0x505a, 0, 0x5091, 0, 0x50c8, 0, 0x0226, 0, 0x0226, 0, 0x50ff, 0, 0x5136,
    0, 0x516d, 0, 0x51a4, 0, 0x51db, 0, 0x5212, 0, 0x5249, 0, 0x0226, 0, 0x0226, 0, 0x5280,
    0, 0x52b7, 0, 0x52ee, 0, 0x0226, 0, 0x5325, 0, 0x535c, 0, 0x0226, 0, 0x5393, 0, 0x53ca,
    0, 0x5401, 0, 0x5438, 0, 0x546f, 0, 0x54a6, 0, 0x54dd, 0, 0x5514, 0, 0x554b, 0, 0x5582,
    0, 0x0226, 0, 0x55b9, 0, 0x55f0, 0, 0x0226, 0, 0x5627, 0, 0x565e, 0, 0x0226, 0, 0x5695,
    0, 0x56cc, 0, 0x5703, 0, 0x573a, 0, 0x5771, 0, 0x0226, 0, 0x57a8, 0, 0x57df, 0, 0x5816,
    0, 0x584d, 0, 0x5884, 0, 0x0226, 0, 0x0226, 0, 0x58bb, 0, 0x58f2, 0, 0x0226, 0, 0x5929,
    0, 0x5960, 0, 0x5997, 0, 0x0226, 0, 0x59ce, 0, 0x5a05, 0, 0x0226, 0, 0x0226, 0, 0x0226,
    0, 0x5a3c, 0, 0x5a73, 0, 0x0226, 0, 0x5aaa, 0, 0x5ae1, 0, 0x5b18, 0, 0x5b4f, 0, 0x5b86,
    0, 0x0226, 0, 0x5bbd, 0, 0x0226, 0, 0x0226, 0, 0x5bf4, 0, 0x0226, 0, 0x5c2b, 0, 0x5c62,
    0, 0x0226, 0, 0x5c99, 0, 0x0226, 0, 0x5cd0, 0, 0x5d07, 0, 0x5d3e, 0, 0x0226, 0, 0x0226,
    0, 0x0226, 0, 0x0226, 0, 0x0226, 0, 0x0226, 0, 0x5d75, 0, 0x0226, 0, 0x0226, 0, 0x5dac,
    0, 0x0226, 0, 0x0226, 0, 0x0226, 0, 0x5de3, 0, 0x5e1a, 0, 0x5e51, 0, 0x5e88, 0, 0x0226,
    0, 0x5ebf, 0, 0x0226, 0, 0x0226, 0, 0x5ef6, 0, 0x5f2d, 0, 0x5f64, 0, 0x5f9b, 0, 0x0226,
    0, 0x0226, 0, 0x0226, 0, 0x0226, 0, 0x0226, 0, 0x5fd2, 0, 0x6009, 0, 0x6040, 0, 0x6077,
    0, 0x60ae, 0, 0x60e5, 0, 0x611c, 0, 0x6153, 0, 0x618a, 0, 0x61c1, 0, 0x61f8, 0, 0x0226,
    0, 0x0226, 0, 0x622f, 0, 0x6266, 0, 0x629d, 0, 0x0226, 0, 0x0226, 0, 0x0226, 0, 0x62d4,
    0, 0x630b, 0, 0x0226, 0, 0x6342, 0, 0x0226, 0, 0x6379, 0, 0x0226, 0, 0x63b0, 0, 0x63e7,
    0, 0x641e, 0, 0x0226, 0, 0x6455, 0, 0x648c, 0, 0x64c3, 0, 0x0226, 0, 0x0226, 0, 0x0226, 0 };

  private static int [] zzUnpackRowMap() {
    int [] result = new int[616];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(ushort[] packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.Length;
    while (i + 1 < l) {
      int high = packed[i++] << 16;
      result[j++] = high | packed[i++];
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static readonly int [] ZZ_TRANS;

  private static readonly ushort[] ZZ_TRANS_PACKED_0 = new ushort[] {
    1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12,
    1, 13, 1, 14, 1, 15, 1, 16, 1, 17, 1, 18, 1, 19, 1, 20,
    1, 21, 1, 22, 1, 23, 2, 11, 1, 24, 2, 11, 1, 25, 1, 26,
    3, 27, 1, 28, 1, 29, 1, 30, 1, 27, 1, 31, 1, 32, 1, 33,
    1, 34, 1, 35, 1, 36, 1, 37, 1, 38, 1, 39, 1, 40, 1, 41,
    1, 42, 1, 43, 1, 44, 1, 45, 1, 46, 1, 47, 1, 48, 1, 49,
    1, 11, 1, 50, 1, 5, 31, 51, 1, 52, 22, 51, 1, 53, 31, 54,
    1, 55, 17, 54, 1, 56, 5, 54, 15, 57, 1, 58, 13, 57, 1, 59,
    1, 57, 1, 60, 23, 57, 56, 0, 1, 11, 1, 61, 2, 11, 1, 62,
    5, 11, 1, 63, 17, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    7, 11, 1, 64, 4, 11, 1, 65, 1, 66, 2, 11, 1, 67, 11, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 5, 11, 1, 68, 4, 11,
    1, 69, 3, 11, 1, 70, 13, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 4, 11, 1, 71, 9, 11, 1, 72, 13, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 2, 11, 1, 73, 1, 74, 3, 11, 1, 75,
    1, 76, 4, 11, 1, 77, 14, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 28, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 1, 11,
    1, 78, 5, 11, 1, 79, 5, 11, 1, 80, 14, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 1, 11, 1, 81, 8, 11, 1, 82, 17, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 3, 11, 1, 83, 1, 11,
    1, 84, 4, 11, 1, 85, 11, 11, 1, 86, 5, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 1, 87, 2, 11, 1, 88, 1, 89, 1, 11,
    1, 90, 3, 11, 1, 91, 6, 11, 1, 92, 10, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 1, 93, 1, 11, 1, 94, 1, 95, 2, 11,
    1, 96, 1, 97, 8, 11, 1, 98, 6, 11, 1, 99, 4, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 10, 11, 1, 100, 17, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 10, 11, 1, 101, 13, 11, 1, 102,
    3, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 1, 11, 1, 103,
    2, 11, 1, 104, 3, 11, 1, 105, 3, 11, 1, 106, 1, 11, 1, 107,
    7, 11, 1, 108, 5, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    1, 109, 6, 11, 1, 110, 7, 11, 1, 111, 12, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 10, 11, 1, 112, 17, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 1, 11, 1, 113, 2, 11, 1, 114, 1, 11,
    1, 115, 3, 11, 1, 116, 17, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 1, 117, 3, 11, 1, 118, 1, 11, 1, 119, 3, 11, 1, 120,
    9, 11, 1, 121, 1, 11, 1, 122, 5, 11, 3, 0, 1, 11, 19, 0,
    1, 11, 3, 0, 1, 11, 1, 123, 3, 11, 1, 124, 4, 11, 1, 125,
    3, 11, 1, 126, 13, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    1, 11, 1, 127, 2, 11, 1, 128, 23, 11, 3, 0, 1, 11, 19, 0,
    1, 11, 3, 0, 1, 11, 1, 129, 8, 11, 1, 130, 11, 11, 1, 131,
    5, 11, 3, 0, 1, 11, 19, 0, 1, 11, 17, 0, 1, 132, 10, 0,
    3, 27, 3, 0, 1, 27, 1, 0, 1, 133, 49, 0, 1, 28, 28, 0,
    1, 134, 1, 0, 1, 134, 9, 0, 1, 134, 1, 0, 2, 134, 2, 0,
    1, 134, 4, 0, 3, 134, 3, 0, 1, 134, 56, 0, 1, 135, 20, 0,
    31, 136, 1, 137, 4, 136, 1, 138, 18, 136, 26, 0, 3, 139, 3, 0,
    1, 139, 1, 140, 65, 0, 1, 141, 59, 0, 1, 142, 53, 0, 1, 143,
    50, 0, 1, 144, 6, 0, 1, 145, 47, 0, 1, 146, 43, 0, 1, 147,
    64, 0, 1, 148, 19, 0, 1, 149, 75, 0, 1, 59, 26, 0, 2, 11,
    1, 150, 25, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 2, 11,
    1, 151, 25, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 7, 11,
    1, 152, 20, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 1, 153,
    1, 154, 6, 11, 1, 155, 13, 11, 1, 156, 5, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 9, 11, 1, 157, 18, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 8, 11, 1, 158, 19, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 10, 11, 1, 159, 17, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 11, 11, 1, 160, 16, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 1, 11, 1, 161, 26, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 1, 11, 1, 162, 2, 11, 1, 163, 4, 11,
    1, 164, 1, 11, 1, 165, 1, 11, 1, 166, 3, 11, 1, 167, 10, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 13, 11, 1, 168, 14, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 3, 11, 1, 169, 24, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 13, 11, 1, 170, 6, 11,
    1, 171, 7, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 12, 11,
    1, 172, 1, 173, 14, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    7, 11, 1, 174, 20, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    1, 11, 1, 175, 6, 11, 1, 176, 19, 11, 3, 0, 1, 11, 19, 0,
    1, 11, 3, 0, 14, 11, 1, 177, 13, 11, 3, 0, 1, 11, 19, 0,
    1, 11, 3, 0, 1, 178, 27, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 8, 11, 1, 179, 19, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 5, 11, 1, 180, 1, 181, 21, 11, 3, 0, 1, 11, 19, 0,
    1, 11, 3, 0, 9, 11, 1, 182, 18, 11, 3, 0, 1, 11, 19, 0,
    1, 11, 3, 0, 3, 11, 1, 183, 10, 11, 1, 184, 13, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 4, 11, 1, 185, 23, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 1, 11, 1, 186, 8, 11, 1, 187,
    17, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 13, 11, 1, 188,
    3, 11, 1, 189, 10, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    2, 11, 1, 190, 25, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    1, 11, 1, 191, 26, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    22, 11, 1, 192, 5, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    14, 11, 1, 193, 13, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    19, 11, 1, 194, 8, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    8, 11, 1, 195, 19, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    14, 11, 1, 196, 13, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    8, 11, 1, 197, 19, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    20, 11, 1, 198, 7, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    9, 11, 1, 199, 18, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    7, 11, 1, 200, 20, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    16, 11, 1, 201, 11, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    3, 11, 1, 202, 16, 11, 1, 203, 7, 11, 3, 0, 1, 11, 19, 0,
    1, 11, 3, 0, 4, 11, 1, 204, 23, 11, 3, 0, 1, 11, 19, 0,
    1, 11, 3, 0, 8, 11, 1, 205, 19, 11, 3, 0, 1, 11, 19, 0,
    1, 11, 3, 0, 1, 206, 2, 11, 1, 207, 6, 11, 1, 208, 17, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 13, 11, 1, 209, 14, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 20, 11, 1, 210, 7, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 8, 11, 1, 211, 1, 212,
    7, 11, 1, 213, 10, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    3, 11, 1, 214, 24, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    1, 215, 6, 11, 1, 216, 20, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 1, 217, 27, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    7, 11, 1, 218, 20, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    3, 11, 1, 219, 24, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    4, 11, 1, 220, 23, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    3, 11, 1, 221, 9, 11, 1, 222, 14, 11, 3, 0, 1, 11, 19, 0,
    1, 11, 3, 0, 3, 11, 1, 223, 24, 11, 3, 0, 1, 11, 19, 0,
    1, 11, 3, 0, 7, 11, 1, 224, 4, 11, 1, 225, 15, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 14, 11, 1, 226, 13, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 4, 11, 1, 227, 23, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 23, 11, 1, 228, 4, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 7, 11, 1, 229, 20, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 6, 11, 1, 230, 17, 11, 1, 231,
    3, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 9, 11, 1, 232,
    3, 11, 1, 233, 14, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    3, 11, 1, 234, 24, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    3, 11, 1, 235, 24, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    8, 11, 1, 236, 11, 11, 1, 237, 7, 11, 3, 0, 1, 11, 19, 0,
    1, 11, 3, 0, 3, 11, 1, 238, 24, 11, 3, 0, 1, 11, 19, 0,
    1, 11, 3, 0, 1, 11, 1, 239, 26, 11, 3, 0, 1, 11, 19, 0,
    1, 11, 28, 0, 3, 240, 3, 0, 1, 240, 2, 0, 1, 241, 11, 0,
    1, 241, 33, 0, 3, 242, 3, 0, 1, 242, 22, 0, 36, 137, 1, 243,
    54, 137, 1, 244, 18, 137, 36, 0, 1, 243, 44, 0, 3, 139, 3, 0,
    1, 139, 25, 0, 1, 245, 1, 0, 1, 245, 9, 0, 1, 245, 1, 0,
    2, 245, 2, 0, 1, 245, 4, 0, 3, 245, 3, 0, 1, 245, 22, 0,
    31, 143, 1, 0, 23, 143, 54, 246, 22, 0, 1, 247, 34, 0, 3, 11,
    1, 248, 24, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 14, 11,
    1, 249, 13, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 11, 11,
    1, 250, 16, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 1, 11,
    1, 251, 26, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 8, 11,
    1, 252, 19, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 14, 11,
    1, 253, 10, 11, 1, 254, 2, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 14, 11, 1, 255, 13, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 1, 0x0100, 27, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    14, 11, 1, 0x0101, 13, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    1, 0x0102, 27, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 1, 11,
    1, 0x0103, 26, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 13, 11,
    1, 0x0104, 14, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 7, 11,
    1, 0x0105, 20, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 1, 0x0106,
    27, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 14, 11, 1, 0x0107,
    13, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 1, 11, 1, 0x0108,
    26, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 10, 11, 1, 0x0109,
    17, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 10, 11, 1, 0x010a,
    17, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 8, 11, 1, 0x010b,
    1, 11, 1, 0x010c, 17, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    4, 11, 1, 0x010d, 23, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    1, 11, 1, 0x010e, 26, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    14, 11, 1, 0x010f, 13, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    8, 11, 1, 0x0110, 19, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    8, 11, 1, 0x0111, 19, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    1, 11, 1, 0x0112, 26, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    13, 11, 1, 0x0113, 14, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    14, 11, 1, 0x0114, 13, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    14, 11, 1, 0x0115, 13, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    14, 11, 1, 0x0116, 13, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    7, 11, 1, 0x0117, 20, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    8, 11, 1, 0x0118, 19, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    23, 11, 1, 0x0119, 4, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    8, 11, 1, 0x011a, 1, 0x011b, 1, 11, 1, 0x011c, 5, 11, 1, 0x011d, 10, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 17, 11, 1, 0x011e, 10, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 21, 11, 1, 0x011f, 6, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 1, 0x0120, 27, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 7, 11, 1, 0x0121, 20, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 4, 11, 1, 0x0122, 23, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 23, 11, 1, 0x0123, 4, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 14, 11, 1, 0x0124, 13, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 3, 11, 1, 0x0125, 24, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 10, 11, 1, 0x0126, 17, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 4, 11, 1, 0x0127, 23, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 11, 11, 1, 0x0128, 16, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 14, 11, 1, 0x0129, 13, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 1, 11, 1, 0x012a, 26, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 17, 11, 1, 0x012b, 10, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 1, 0x012c, 27, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 3, 11, 1, 0x012d, 24, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 14, 11, 1, 0x012e, 13, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 14, 11, 1, 0x012f, 13, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 10, 11, 1, 0x0130, 17, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 14, 11, 1, 0x0131, 13, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 14, 11, 1, 0x0132, 13, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 4, 11, 1, 0x0133, 23, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 13, 11, 1, 0x0134, 14, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 17, 11, 1, 0x0135, 10, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 24, 11, 1, 0x0136, 3, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 13, 11, 1, 0x0137, 14, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 20, 11, 1, 0x0138, 7, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 14, 11, 1, 0x0139, 13, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 3, 11, 1, 0x013a, 24, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 13, 11, 1, 0x013b, 14, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 9, 11, 1, 0x013c, 18, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 17, 11, 1, 0x013d, 10, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 3, 11, 1, 0x013e, 24, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 4, 11, 1, 0x013f, 23, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 2, 11, 1, 0x0140, 25, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 7, 11, 1, 0x0141, 20, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 3, 11, 1, 0x0142, 24, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 8, 11, 1, 0x0143, 19, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 8, 11, 1, 0x0144, 19, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 1, 11, 1, 0x0145, 2, 11, 1, 0x0146, 23, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 22, 11, 1, 0x0147, 5, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 14, 11, 1, 0x0148, 13, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 20, 11, 1, 0x0149, 7, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 1, 0x014a, 27, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 28, 0, 3, 240, 3, 0, 1, 240, 37, 0,
    1, 0x014b, 10, 0, 3, 242, 3, 0, 1, 242, 76, 0, 1, 0x014c, 30, 0,
    1, 0x014d, 25, 0, 4, 11, 1, 0x014e, 23, 11, 3, 0, 1, 11, 19, 0,
    1, 11, 3, 0, 1, 0x014f, 27, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 1, 11, 1, 0x0150, 22, 11, 1, 0x0151, 3, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 7, 11, 1, 0x0152, 20, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 1, 11, 1, 0x0153, 26, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 3, 11, 1, 0x0154, 7, 11, 1, 0x0155, 16, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 26, 11, 1, 0x0156, 1, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 3, 11, 1, 0x0157, 24, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 14, 11, 1, 0x0158, 13, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 14, 11, 1, 0x0159, 13, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 7, 11, 1, 0x015a, 20, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 14, 11, 1, 0x015b, 13, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 8, 11, 1, 0x015c, 19, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 26, 11, 1, 0x015d, 1, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 4, 11, 1, 0x015e, 23, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 13, 11, 1, 0x015f, 14, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 6, 11, 1, 0x0160, 21, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 3, 11, 1, 0x0161, 24, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 3, 11, 1, 0x0162, 24, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 1, 0x0163, 27, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 5, 11, 1, 0x0164, 22, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 13, 11, 1, 0x0165, 3, 11, 1, 0x0166,
    10, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 12, 11, 1, 0x0167,
    15, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 25, 11, 1, 0x0168,
    2, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 1, 0x0169, 27, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 4, 11, 1, 0x016a, 23, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 16, 11, 1, 0x016b, 11, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 4, 11, 1, 0x016c, 23, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 14, 11, 1, 0x016d, 13, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 14, 11, 1, 0x016e, 13, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 3, 11, 1, 0x016f, 24, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 14, 11, 1, 0x0170, 13, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 4, 11, 1, 0x0171, 23, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 14, 11, 1, 0x0172, 13, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 1, 11, 1, 0x0173, 26, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 8, 11, 1, 0x0174, 19, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 3, 11, 1, 0x0175, 24, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 4, 11, 1, 0x0176, 23, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 17, 11, 1, 0x0177, 10, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 1, 0x0178, 2, 11, 1, 0x0179,
    24, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 13, 11, 1, 0x017a,
    14, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 1, 0x017b, 27, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 17, 11, 1, 0x017c, 10, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 7, 11, 1, 0x017d, 20, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 4, 11, 1, 0x017e, 23, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 1, 0x017f, 27, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 8, 11, 1, 0x0180, 19, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 3, 11, 1, 0x0181, 3, 11, 1, 0x0182,
    20, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 3, 11, 1, 0x0183,
    24, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 9, 11, 1, 0x0184,
    18, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 1, 0x0185, 27, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 14, 11, 1, 0x0186, 13, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 8, 11, 1, 0x0187, 19, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 4, 11, 1, 0x0188, 23, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 13, 11, 1, 0x0189, 14, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 1, 11, 1, 0x018a, 26, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 14, 11, 1, 0x018b, 13, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 8, 11, 1, 0x018c, 19, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 1, 0x018d, 27, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 12, 11, 1, 0x018e, 15, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 1, 0x018f, 27, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 8, 11, 1, 0x0190, 19, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 14, 11, 1, 0x0191, 13, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 3, 11, 1, 0x0192, 24, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 6, 11, 1, 0x0193, 21, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 4, 11, 1, 0x0194, 23, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 3, 11, 1, 0x0195, 24, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 13, 11, 1, 0x0196, 3, 11, 1, 0x0197, 10, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 14, 11, 1, 0x0198, 13, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 28, 0, 3, 0x0199, 3, 0, 1, 0x0199,
    2, 0, 1, 0x019a, 11, 0, 1, 0x019a, 8, 0, 3, 11, 1, 0x019b, 24, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 7, 11, 1, 0x019c, 20, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 10, 11, 1, 0x019d, 17, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 14, 11, 1, 0x019e, 13, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 4, 11, 1, 0x019f, 23, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 16, 11, 1, 0x01a0, 11, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 14, 11, 1, 0x01a1, 13, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 1, 11, 1, 0x01a2, 26, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 12, 11, 1, 0x01a3, 15, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 4, 11, 1, 0x01a4, 23, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 3, 11, 1, 0x01a5, 24, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 27, 11, 1, 0x01a6, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 8, 11, 1, 0x01a7, 19, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 8, 11, 1, 0x01a8, 19, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 3, 11, 1, 0x01a9, 24, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 20, 11, 1, 0x01aa, 7, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 4, 11, 1, 0x01ab, 23, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 6, 11, 1, 0x01ac, 21, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 8, 11, 1, 0x01ad, 19, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 22, 11, 1, 0x01ae, 5, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 2, 11, 1, 0x01af, 25, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 26, 11, 1, 0x01b0, 1, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 20, 11, 1, 0x01b1, 7, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 10, 11, 1, 0x01b2, 17, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 8, 11, 1, 0x01b3, 19, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 17, 11, 1, 0x01b4, 10, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 3, 11, 1, 0x01b5, 24, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 4, 11, 1, 0x01b6, 23, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 20, 11, 1, 0x01b7, 7, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 1, 0x01b8, 27, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 20, 11, 1, 0x01b9, 7, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 13, 11, 1, 0x01ba, 3, 11, 1, 0x01bb, 10, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 14, 11, 1, 0x01bc, 13, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 3, 11, 1, 0x01bd, 24, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 8, 11, 1, 0x01be, 19, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 10, 11, 1, 0x01bf, 17, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 1, 11, 1, 0x01c0, 26, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 17, 11, 1, 0x01c1, 10, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 14, 11, 1, 0x01c2, 13, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 4, 11, 1, 0x01c3, 23, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 11, 11, 1, 0x01c4, 16, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 1, 0x01c5, 27, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 1, 11, 1, 0x01c6, 26, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 1, 11, 1, 0x01c7, 11, 11, 1, 0x01c8,
    14, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 7, 11, 1, 0x01c9,
    20, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 20, 11, 1, 0x01ca,
    7, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 8, 11, 1, 0x01cb,
    19, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 8, 11, 1, 0x01cc,
    19, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 1, 0x01cd, 1, 0x01ce,
    26, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 1, 11, 1, 0x01cf,
    26, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 3, 11, 1, 0x01d0,
    24, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 7, 11, 1, 0x01d1,
    20, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 7, 11, 1, 0x01d2,
    20, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 3, 11, 1, 0x01d3,
    24, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 1, 11, 1, 0x01d4,
    26, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 14, 11, 1, 0x01d5,
    13, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 10, 11, 1, 0x01d6,
    17, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 17, 11, 1, 0x01d7,
    10, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 6, 11, 1, 0x01d8,
    21, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 4, 11, 1, 0x01d9,
    23, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 7, 11, 1, 0x01da,
    20, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 11, 11, 1, 0x01db,
    16, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 8, 11, 1, 0x01dc,
    19, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 22, 11, 1, 0x01dd,
    5, 11, 3, 0, 1, 11, 19, 0, 1, 11, 28, 0, 3, 0x0199, 3, 0,
    1, 0x0199, 23, 0, 5, 11, 1, 0x01de, 22, 11, 3, 0, 1, 11, 19, 0,
    1, 11, 3, 0, 8, 11, 1, 0x01df, 19, 11, 3, 0, 1, 11, 19, 0,
    1, 11, 3, 0, 3, 11, 1, 0x01e0, 24, 11, 3, 0, 1, 11, 19, 0,
    1, 11, 3, 0, 1, 0x01e1, 27, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 4, 11, 1, 0x01e2, 23, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 3, 11, 1, 0x01e3, 24, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 8, 11, 1, 0x01e4, 19, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 14, 11, 1, 0x01e5, 13, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 7, 11, 1, 0x01e6, 20, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 10, 11, 1, 0x01e7, 17, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 14, 11, 1, 0x01e8, 13, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 17, 11, 1, 0x01e9, 10, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 17, 11, 1, 0x01ea, 10, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 8, 11, 1, 0x01eb, 19, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 3, 11, 1, 0x01ec, 24, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 4, 11, 1, 0x01ed, 23, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 1, 0x01ee, 27, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    23, 11, 1, 0x01ef, 4, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    3, 11, 1, 0x01f0, 24, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    14, 11, 1, 0x01f1, 13, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    8, 11, 1, 0x01f2, 19, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    8, 11, 1, 0x01f3, 19, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    12, 11, 1, 0x01f4, 15, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    6, 11, 1, 0x01f5, 21, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    22, 11, 1, 0x01f6, 5, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    3, 11, 1, 0x01f7, 24, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    1, 11, 1, 0x01f8, 26, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    4, 11, 1, 0x01f9, 23, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    20, 11, 1, 0x01fa, 7, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    4, 11, 1, 0x01fb, 23, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0,
    1, 0x01fc, 27, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 1, 0x01fd,
    27, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 7, 11, 1, 0x01fe,
    20, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 7, 11, 1, 0x01ff,
    20, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 8, 11, 1, 0x0200,
    19, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 4, 11, 1, 0x0201,
    23, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 14, 11, 1, 0x0202,
    13, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 13, 11, 1, 0x0203,
    14, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 5, 11, 1, 0x0204,
    22, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 18, 11, 1, 0x0205,
    9, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 10, 11, 1, 0x0206,
    17, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 20, 11, 1, 0x0207,
    7, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 4, 11, 1, 0x0208,
    23, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 17, 11, 1, 0x0209,
    10, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 6, 11, 1, 0x020a,
    21, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 17, 11, 1, 0x020b,
    10, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 4, 11, 1, 0x020c,
    23, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 17, 11, 1, 0x020d,
    10, 11, 3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 1, 0x020e, 27, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 8, 11, 1, 0x020f, 19, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 13, 11, 1, 0x0210, 14, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 3, 11, 1, 0x0211, 24, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 4, 11, 1, 0x0212, 23, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 20, 11, 1, 0x0213, 7, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 1, 11, 1, 0x0214, 26, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 17, 11, 1, 0x0215, 10, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 14, 11, 1, 0x0216, 13, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 7, 11, 1, 0x0217, 20, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 20, 11, 1, 0x0218, 7, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 3, 11, 1, 0x0219, 24, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 14, 11, 1, 0x021a, 13, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 8, 11, 1, 0x021b, 19, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 14, 11, 1, 0x021c, 13, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 1, 11, 1, 0x021d, 26, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 3, 11, 1, 0x021e, 24, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 14, 11, 1, 0x021f, 13, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 4, 11, 1, 0x0220, 23, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 12, 11, 1, 0x0221, 15, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 14, 11, 1, 0x0222, 13, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 5, 11, 1, 0x0223, 22, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 3, 11, 1, 0x0224, 24, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 14, 11, 1, 0x0225, 13, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 4, 11, 1, 0x0226, 23, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 20, 11, 1, 0x0227, 7, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 14, 11, 1, 0x0228, 13, 11,
    3, 0, 1, 11, 19, 0, 1, 11, 3, 0, 1, 0x0229, 27, 11, 3, 0,
    1, 11, 19, 0, 1, 11, 3, 0, 1, 0x022a, 27, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 8, 11, 1, 0x022b, 19, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 8, 11, 1, 0x022c, 19, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 3, 11, 1, 0x022d, 24, 11, 3, 0, 1, 11,
    19, 0, 1, 11, 3, 0, 1, 0x022e, 27, 11, 3, 0, 1, 11, 19, 0,
    1, 11, 3, 0, 20, 11, 1, 0x022f, 7, 11, 3, 0, 1, 11, 19, 0,
    1, 11, 3, 0, 4, 11, 1, 0x0230, 23, 11, 3, 0, 1, 11, 19, 0,
    1, 11, 3, 0, 7, 11, 1, 0x0231, 20, 11, 3, 0, 1, 11, 19, 0,
    1, 11, 3, 0, 1, 0x0232, 27, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 5, 11, 1, 0x0233, 22, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 17, 11, 1, 0x0234, 10, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 8, 11, 1, 0x0235, 19, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 8, 11, 1, 0x0236, 19, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 1, 11, 1, 0x0237, 26, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 3, 11, 1, 0x0238, 24, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 18, 11, 1, 0x0239, 9, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 14, 11, 1, 0x023a, 13, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 20, 11, 1, 0x023b, 7, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 8, 11, 1, 0x023c, 19, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 6, 11, 1, 0x023d, 21, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 13, 11, 1, 0x023e, 14, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 7, 11, 1, 0x023f, 20, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 3, 11, 1, 0x0240, 24, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 3, 11, 1, 0x0241, 24, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 20, 11, 1, 0x0242, 7, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 14, 11, 1, 0x0243, 13, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 20, 11, 1, 0x0244, 7, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 7, 11, 1, 0x0245, 20, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 1, 11, 1, 0x0246, 26, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 8, 11, 1, 0x0247, 19, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 8, 11, 1, 0x0248, 19, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 14, 11, 1, 0x0249, 13, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 10, 11, 1, 0x024a, 17, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 7, 11, 1, 0x024b, 20, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 4, 11, 1, 0x024c, 23, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 4, 11, 1, 0x024d, 23, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 17, 11, 1, 0x024e, 10, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 8, 11, 1, 0x024f, 19, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 11, 11, 1, 0x0250, 16, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 8, 11, 1, 0x0251, 19, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 7, 11, 1, 0x0252, 20, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 1, 11, 1, 0x0253, 26, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 10, 11, 1, 0x0254, 17, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 20, 11, 1, 0x0255, 7, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 3, 11, 1, 0x0256, 24, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 11, 11, 1, 0x0257, 16, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 8, 11, 1, 0x0258, 19, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 8, 11, 1, 0x0259, 19, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 14, 11, 1, 0x025a, 13, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 3, 11, 1, 0x025b, 24, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 11, 11, 1, 0x025c, 16, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 10, 11, 1, 0x025d, 17, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 3, 11, 1, 0x025e, 24, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 1, 11, 1, 0x025f, 26, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 1, 11, 1, 0x0260, 26, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 1, 11, 1, 0x0261, 26, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 7, 11, 1, 0x0262, 20, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 10, 11, 1, 0x0263, 17, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 10, 11, 1, 0x0264, 17, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 7, 11, 1, 0x0265, 20, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 7, 11, 1, 0x0266, 20, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 7, 11, 1, 0x0267, 20, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    3, 0, 11, 11, 1, 0x0268, 16, 11, 3, 0, 1, 11, 19, 0, 1, 11,
    2, 0, 0 };

  private static int [] zzUnpackTrans() {
    int [] result = new int[25850];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(ushort[] packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.Length;
    while (i + 1 < l) {
      int count = packed[i++];
      int value = packed[i++];
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private const int ZZ_UNKNOWN_ERROR = 0;
  private const int ZZ_NO_MATCH = 1;
  private const int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static readonly String[] ZZ_ERROR_MSG = new string[] {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static readonly int [] ZZ_ATTRIBUTE;

  private static readonly ushort[] ZZ_ATTRIBUTE_PACKED_0 = new ushort[] {
    4, 0, 1, 9, 23, 1, 2, 9, 2, 1, 1, 9, 3, 1, 2, 9,
    1, 1, 6, 9, 1, 1, 1, 9, 3, 1, 5, 9, 1, 1, 1, 9,
    2, 1, 1, 9, 71, 1, 2, 0, 1, 1, 1, 9, 2, 0, 2, 1,
    1, 0, 2, 9, 1, 1, 3, 9, 1, 0, 1, 9, 1, 0, 91, 1,
    1, 0, 1, 1, 2, 9, 1, 1, 2, 0, 83, 1, 1, 0, 2, 9,
    76, 1, 1, 0, 206, 1, 0 };

  private static int [] zzUnpackAttribute() {
    int [] result = new int[616];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(ushort[] packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.Length;
    while (i + 1 < l) {
      int count = packed[i++];
      int value = packed[i++];
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private System.IO.TextReader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char[] zzBuffer = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private bool zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private bool zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private bool zzEOFDone;

  /* user code: */

	// **********************************************
	// yyParser.yyDebug interface:
	
		/** move on to next token.
			@return false if positioned beyond tokens.
			@throws IOException on input error.
		*/
		public bool advance ()
		{
			return !zzAtEOF;
		}
		
		/** classifies current token.
			Should not be called if advance() returned false.
			@return current %token or single character.
		*/
		// public int token ();
		
		/** associated with current token.
			Should not be called if advance() returned false.
			@return value for token().
		*/
		Object yylval;
		public Object value ()
		{
			return yylval;
		}
		
		public const int ScannerEOF = 0;
		
	// **********************************************
	

	// Make CSFlex compatible with Yacc
	void BEGIN(int state) { yybegin(state); }
	public void unput(char c) { yypushback(1); }
	const int INITIAL = YYINITIAL;
	// Should call the Parser's yyerror!
	void yyerror(Func<String>yytext) { Console.Error.WriteLine(yytext()); System.Environment.Exit(0); }
	
	
	int insideObj = 0;

	int linenum = 1;	// custom, adjusted for includes

	//#define YY_USER_ACTION printf("[line %d] READ: %s | 1st char: %c %d |\n",  yylinenum, yytext, yytext[0], yytext[1]);



  /**
   * Creates a new scanner
   * There is also a System.IO.Stream version of this constructor.
   *
   * @param   in  the System.IO.TextReader to read input from.
   */
  internal DelphiScanner(TextReader @in) {
  	yyreset(@in);	// Inits the scanner
    this.zzReader = @in;
  }

  /**
   * Creates a new scanner.
   * There is also TextReader version of this constructor.
   *
   * @param   in  the System.IO.Stream to read input from.
   */
  internal DelphiScanner(Stream @in) : this(new StreamReader(@in))
  {
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private bool zzRefill() {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      Array.Copy(zzBuffer, zzStartRead,
                 zzBuffer, 0,
                 zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.Length) {
      /* if not: blow it up */
      char[] newBuffer = new char[zzCurrentPos*2];
      Array.Copy(zzBuffer, 0, newBuffer, 0, zzBuffer.Length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.Read(zzBuffer, zzEndRead,
                                            zzBuffer.Length-zzEndRead);

    if (numRead <= 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public void yyclose() {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.Close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public void yyreset(System.IO.TextReader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex/CSFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (IndexOutOfRangeException) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Exception(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   System.IO.IOException  if any I/O-Error occurs
   */
  public int token() {
    int zzInput = 0;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      bool zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
          break;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        bool zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          bool eof = zzRefill();
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


        while (true) {
          goto zzForAction_skip;
        zzForAction: break;
        zzForAction_skip:
          if (!ZZ_SPURIOUS_WARNINGS_SUCK) goto zzForAction;
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            goto zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            bool eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
            goto zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) goto zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) goto zzForAction;
          }

        }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 33: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 371 "DelphiLex.l"
       return KW_IS; 
#line default
          }
          break;
        case 8: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 350 "DelphiLex.l"
        return KW_SUM; 
#line default
          }
          break;
        case 134: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 199 "DelphiLex.l"
           return KW_REGISTER; 
#line default
          }
          break;
        case 132: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 216 "DelphiLex.l"
           return KW_VARARGS; 
#line default
          }
          break;
        case 25: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 386 "DelphiLex.l"
                linenum++; 
#line default
          }
          break;
        case 76: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 110 "DelphiLex.l"
        return KW_USES; 
#line default
          }
          break;
        case 98: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 122 "DelphiLex.l"
         return KW_CLASS; 
#line default
          }
          break;
        case 89: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 299 "DelphiLex.l"
                   	// HACK!!! temporary. must change
							unput(';');
							BEGIN(INITIAL);
							return KW_END;
						
#line default
          }
          break;
        case 69: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 313 "DelphiLex.l"
                  return CONST_REAL; 
#line default
          }
          break;
        case 168: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 117 "DelphiLex.l"
                 return KW_INIT; 
#line default
          }
          break;
        case 162: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 139 "DelphiLex.l"
             return KW_DESTRUCTOR; 
#line default
          }
          break;
        case 157: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 128 "DelphiLex.l"
            return KW_PROCEDURE; 
#line default
          }
          break;
        case 143: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 200 "DelphiLex.l"
           return KW_SAFECALL; 
#line default
          }
          break;
        case 154: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 206 "DelphiLex.l"
            return KW_ASSEMBLER; 
#line default
          }
          break;
        case 128: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 210 "DelphiLex.l"
           return KW_FORWARD; 
#line default
          }
          break;
        case 10: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 330 "DelphiLex.l"
        return COMMA; 
#line default
          }
          break;
        case 91: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 259 "DelphiLex.l"
         return TYPE_INT64; 
#line default
          }
          break;
        case 153: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 130 "DelphiLex.l"
            return KW_INHERITED; 
#line default
          }
          break;
        case 111: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 120 "DelphiLex.l"
          return KW_OBJECT; 
#line default
          }
          break;
        case 129: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 207 "DelphiLex.l"
           return KW_DYNAMIC; 
#line default
          }
          break;
        case 51: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 367 "DelphiLex.l"
        return KW_GE; 
#line default
          }
          break;
        case 35: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 165 "DelphiLex.l"
       return KW_AT; 
#line default
          }
          break;
        case 63: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 143 "DelphiLex.l"
        return KW_END; 
#line default
          }
          break;
        case 17: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 346 "DelphiLex.l"
        return KW_DEREF; 
#line default
          }
          break;
        case 73: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 251 "DelphiLex.l"
        return TYPE_BYTE; 
#line default
          }
          break;
        case 27: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 390 "DelphiLex.l"
               
#line default
          }
          break;
        case 151: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 273 "DelphiLex.l"
           return TYPE_WIDECHAR; 
#line default
          }
          break;
        case 170: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 278 "DelphiLex.l"
                 return TYPE_RSCSTR; 
#line default
          }
          break;
        case 120: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 256 "DelphiLex.l"
           return TYPE_INT; 
#line default
          }
          break;
        case 50: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 370 "DelphiLex.l"
        return KW_DIFF; 
#line default
          }
          break;
        case 147: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 265 "DelphiLex.l"
           return TYPE_EXTENDED; 
#line default
          }
          break;
        case 137: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 272 "DelphiLex.l"
           return TYPE_PCHAR; 
#line default
          }
          break;
        case 87: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 253 "DelphiLex.l"
        return TYPE_WORD; 
#line default
          }
          break;
        case 90: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 161 "DelphiLex.l"
         return KW_LABEL; 
#line default
          }
          break;
        case 3: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 310 "DelphiLex.l"
            return CONST_INT; 
#line default
          }
          break;
        case 65: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 148 "DelphiLex.l"
        return KW_FOR; 
#line default
          }
          break;
        case 100: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 196 "DelphiLex.l"
         return KW_CDECL; 
#line default
          }
          break;
        case 28: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 391 "DelphiLex.l"
                linenum++; 
#line default
          }
          break;
        case 130: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 215 "DelphiLex.l"
           return KW_VIRTUAL; 
#line default
          }
          break;
        case 141: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 212 "DelphiLex.l"
           return KW_OVERRIDE; 
#line default
          }
          break;
        case 159: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 277 "DelphiLex.l"
             return TYPE_STR; 
#line default
          }
          break;
        case 57: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 166 "DelphiLex.l"
        return KW_TRY; 
#line default
          }
          break;
        case 92: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 142 "DelphiLex.l"
         return KW_BEGIN; 
#line default
          }
          break;
        case 115: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 167 "DelphiLex.l"
          return KW_EXCEPT; 
#line default
          }
          break;
        case 85: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 270 "DelphiLex.l"
        return TYPE_CHAR; 
#line default
          }
          break;
        case 1: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 400 "DelphiLex.l"
                  yyerror(yytext); 
#line default
          }
          break;
        case 104: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 264 "DelphiLex.l"
          return TYPE_REAL48; 
#line default
          }
          break;
        case 55: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 312 "DelphiLex.l"
          return CONST_NIL; 
#line default
          }
          break;
        case 23: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 383 "DelphiLex.l"
        BEGIN(XCOMMENT1); 
#line default
          }
          break;
        case 64: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 359 "DelphiLex.l"
        return KW_XOR; 
#line default
          }
          break;
        case 21: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 365 "DelphiLex.l"
        return KW_LT; 
#line default
          }
          break;
        case 40: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 124 "DelphiLex.l"
       return KW_OF; 
#line default
          }
          break;
        case 121: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 281 "DelphiLex.l"
           return TYPE_BOOL; 
#line default
          }
          break;
        case 169: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 115 "DelphiLex.l"
                 return KW_IMPL; 
#line default
          }
          break;
        case 125: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 201 "DelphiLex.l"
           return KW_STDCALL; 
#line default
          }
          break;
        case 133: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 257 "DelphiLex.l"
           return TYPE_LONGWORD; 
#line default
          }
          break;
        case 46: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 339 "DelphiLex.l"
        return KW_ASSIGN; 
#line default
          }
          break;
        case 2: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 375 "DelphiLex.l"
                         return IDENTIFIER; 
#line default
          }
          break;
        case 110: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 191 "DelphiLex.l"
          return KW_PUBLIC; 
#line default
          }
          break;
        case 7: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 344 "DelphiLex.l"
        return KW_DOT; 
#line default
          }
          break;
        case 47: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 388 "DelphiLex.l"
         BEGIN(XCOMMENT2); 
#line default
          }
          break;
        case 119: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 258 "DelphiLex.l"
           return TYPE_LONGINT; 
#line default
          }
          break;
        case 155: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 136 "DelphiLex.l"
            return KW_THRVAR; 
#line default
          }
          break;
        case 103: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 211 "DelphiLex.l"
          return KW_INLINE; 
#line default
          }
          break;
        case 88: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 377 "DelphiLex.l"
              
#line default
          }
          break;
        case 48: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 380 "DelphiLex.l"
           
#line default
          }
          break;
        case 161: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 220 "DelphiLex.l"
             return KW_DEPRECATED; 
#line default
          }
          break;
        case 59: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 354 "DelphiLex.l"
        return KW_MOD; 
#line default
          }
          break;
        case 38: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 358 "DelphiLex.l"
       return KW_OR;	 
#line default
          }
          break;
        case 18: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 349 "DelphiLex.l"
        return KW_SUB; 
#line default
          }
          break;
        case 127: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 168 "DelphiLex.l"
           return KW_FINALLY; 
#line default
          }
          break;
        case 158: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 192 "DelphiLex.l"
            return KW_PUBLISHED; 
#line default
          }
          break;
        case 114: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 208 "DelphiLex.l"
          return KW_EXPORT; 
#line default
          }
          break;
        case 109: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 123 "DelphiLex.l"
          return KW_PACKED; 
#line default
          }
          break;
        case 26: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 384 "DelphiLex.l"
                BEGIN(INITIAL); 
#line default
          }
          break;
        case 54: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 294 "DelphiLex.l"
          	BEGIN(ASMCODESEC);
							return KW_ASM;
						
#line default
          }
          break;
        case 118: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 105 "DelphiLex.l"
           return KW_LIBRARY; 
#line default
          }
          break;
        case 67: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 134 "DelphiLex.l"
        return KW_VAR; 
#line default
          }
          break;
        case 16: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 345 "DelphiLex.l"
        return KW_ADDR; 
#line default
          }
          break;
        case 80: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 160 "DelphiLex.l"
        return KW_GOTO; 
#line default
          }
          break;
        case 84: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 284 "DelphiLex.l"
        return TYPE_COMP; 
#line default
          }
          break;
        case 20: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 352 "DelphiLex.l"
        return KW_MUL; 
#line default
          }
          break;
        case 146: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 209 "DelphiLex.l"
           return KW_EXTERNAL; 
#line default
          }
          break;
        case 5: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 331 "DelphiLex.l"
        return SEMICOL; 
#line default
          }
          break;
        case 74: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 267 "DelphiLex.l"
        return TYPE_DOUBLE; 
#line default
          }
          break;
        case 112: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 263 "DelphiLex.l"
          return TYPE_FLOAT; 
#line default
          }
          break;
        case 29: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 305 "DelphiLex.l"
                  return ASM_OP; 
#line default
          }
          break;
        case 77: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 324 "DelphiLex.l"
          return CONST_BOOL; 
#line default
          }
          break;
        case 156: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 190 "DelphiLex.l"
            return KW_PROTECTED; 
#line default
          }
          break;
        case 68: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 314 "DelphiLex.l"
                    return CONST_REAL; 
#line default
          }
          break;
        case 160: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 282 "DelphiLex.l"
             return TYPE_OLEVAR; 
#line default
          }
          break;
        case 61: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 360 "DelphiLex.l"
        return KW_SHL; 
#line default
          }
          break;
        case 106: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 121 "DelphiLex.l"
          return KW_RECORD; 
#line default
          }
          break;
        case 166: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 138 "DelphiLex.l"
              return KW_CONSTRUCTOR; 
#line default
          }
          break;
        case 13: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 334 "DelphiLex.l"
        return RBRAC; 
#line default
          }
          break;
        case 145: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 252 "DelphiLex.l"
           return TYPE_SHORTINT; 
#line default
          }
          break;
        case 113: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 274 "DelphiLex.l"
          return TYPE_STR; 
#line default
          }
          break;
        case 102: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 315 "DelphiLex.l"
                            return CONST_REAL; 
#line default
          }
          break;
        case 123: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 107 "DelphiLex.l"
           return KW_PROGRAM; 
#line default
          }
          break;
        case 122: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 193 "DelphiLex.l"
           return KW_PRIVATE; 
#line default
          }
          break;
        case 81: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 158 "DelphiLex.l"
        return KW_ELSE; 
#line default
          }
          break;
        case 78: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 137 "DelphiLex.l"
        return KW_TYPE; 
#line default
          }
          break;
        case 62: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 361 "DelphiLex.l"
        return KW_SHR; 
#line default
          }
          break;
        case 36: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 341 "DelphiLex.l"
       return KW_AS; 
#line default
          }
          break;
        case 72: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 320 "DelphiLex.l"
                   return CONST_CHAR; 
#line default
          }
          break;
        case 105: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 151 "DelphiLex.l"
          return KW_REPEAT; 
#line default
          }
          break;
        case 56: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 362 "DelphiLex.l"
        return KW_NOT; 
#line default
          }
          break;
        case 101: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 153 "DelphiLex.l"
         return KW_WHILE; 
#line default
          }
          break;
        case 49: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 368 "DelphiLex.l"
        return KW_LE; 
#line default
          }
          break;
        case 34: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 156 "DelphiLex.l"
       return KW_IF; 
#line default
          }
          break;
        case 43: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 340 "DelphiLex.l"
        return KW_RANGE; 
#line default
          }
          break;
        case 52: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 389 "DelphiLex.l"
                  BEGIN(INITIAL); 
#line default
          }
          break;
        case 150: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 285 "DelphiLex.l"
           return TYPE_CURR; 
#line default
          }
          break;
        case 24: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 385 "DelphiLex.l"
               
#line default
          }
          break;
        case 14: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 335 "DelphiLex.l"
        return RPAREN; 
#line default
          }
          break;
        case 6: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 398 "DelphiLex.l"
        linenum++; 
#line default
          }
          break;
        case 117: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 150 "DelphiLex.l"
          return KW_DOWNTO; 
#line default
          }
          break;
        case 37: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 149 "DelphiLex.l"
       return KW_TO; 
#line default
          }
          break;
        case 135: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 205 "DelphiLex.l"
           return KW_ABSTRACT; 
#line default
          }
          break;
        case 99: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 133 "DelphiLex.l"
         return KW_CONST; 
#line default
          }
          break;
        case 15: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 369 "DelphiLex.l"
        return KW_EQ; 
#line default
          }
          break;
        case 79: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 157 "DelphiLex.l"
        return KW_THEN; 
#line default
          }
          break;
        case 164: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 214 "DelphiLex.l"
              return KW_REINTRODUCE; 
#line default
          }
          break;
        case 94: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 286 "DelphiLex.l"
         return TYPE_ARRAY; 
#line default
          }
          break;
        case 144: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 254 "DelphiLex.l"
           return TYPE_SMALLINT; 
#line default
          }
          break;
        case 9: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 329 "DelphiLex.l"
        return COLON; 
#line default
          }
          break;
        case 39: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 169 "DelphiLex.l"
       return KW_ON; 
#line default
          }
          break;
        case 107: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 260 "DelphiLex.l"
          return TYPE_UINT64; 
#line default
          }
          break;
        case 11: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 332 "DelphiLex.l"
        return LBRAC; 
#line default
          }
          break;
        case 138: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 219 "DelphiLex.l"
           return KW_PLATFORM; 
#line default
          }
          break;
        case 83: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 159 "DelphiLex.l"
        return KW_CASE; 
#line default
          }
          break;
        case 22: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 366 "DelphiLex.l"
        return KW_GT; 
#line default
          }
          break;
        case 71: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 322 "DelphiLex.l"
             return CONST_STR; 
#line default
          }
          break;
        case 152: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 114 "DelphiLex.l"
            return KW_INTERF; 
#line default
          }
          break;
        case 45: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 319 "DelphiLex.l"
             return CONST_CHAR; 
#line default
          }
          break;
        case 41: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 145 "DelphiLex.l"
       return KW_DO; 
#line default
          }
          break;
        case 149: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 255 "DelphiLex.l"
           return TYPE_CARDINAL; 
#line default
          }
          break;
        case 53: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 357 "DelphiLex.l"
        return KW_AND; 
#line default
          }
          break;
        case 142: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 198 "DelphiLex.l"
            return KW_PASCAL; 
#line default
          }
          break;
        case 31: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 304 "DelphiLex.l"
                   linenum++; 
#line default
          }
          break;
        case 66: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 353 "DelphiLex.l"
        return KW_QUOT; 
#line default
          }
          break;
        case 140: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 213 "DelphiLex.l"
           return KW_OVERLOAD; 
#line default
          }
          break;
        case 19: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 351 "DelphiLex.l"
        return KW_DIV; 
#line default
          }
          break;
        case 165: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 275 "DelphiLex.l"
              return TYPE_SHORTSTR; 
#line default
          }
          break;
        case 97: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 325 "DelphiLex.l"
           return CONST_BOOL; 
#line default
          }
          break;
        case 75: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 106 "DelphiLex.l"
        return KW_UNIT; 
#line default
          }
          break;
        case 44: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 321 "DelphiLex.l"
         return CONST_STR; 
#line default
          }
          break;
        case 12: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 333 "DelphiLex.l"
        return LPAREN; 
#line default
          }
          break;
        case 58: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 135 "DelphiLex.l"
        return KW_OUT; 
#line default
          }
          break;
        case 4: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 396 "DelphiLex.l"
                  
#line default
          }
          break;
        case 30: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 298 "DelphiLex.l"
                       
#line default
          }
          break;
        case 42: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 311 "DelphiLex.l"
                  return CONST_INT; 
#line default
          }
          break;
        case 126: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 111 "DelphiLex.l"
           return KW_EXPORTS; 
#line default
          }
          break;
        case 139: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 129 "DelphiLex.l"
           return KW_PROPERTY; 
#line default
          }
          break;
        case 124: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 287 "DelphiLex.l"
           return TYPE_PTR; 
#line default
          }
          break;
        case 60: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 289 "DelphiLex.l"
        return TYPE_SET; 
#line default
          }
          break;
        case 167: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 116 "DelphiLex.l"
               return KW_FINALIZ; 
#line default
          }
          break;
        case 32: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 372 "DelphiLex.l"
       return KW_IN; 
#line default
          }
          break;
        case 131: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 283 "DelphiLex.l"
           return TYPE_VAR; 
#line default
          }
          break;
        case 82: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 288 "DelphiLex.l"
        return TYPE_FILE; 
#line default
          }
          break;
        case 108: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 197 "DelphiLex.l"
          return KW_PASCAL; 
#line default
          }
          break;
        case 136: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 204 "DelphiLex.l"
           return KW_ABSOLUTE; 
#line default
          }
          break;
        case 148: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 127 "DelphiLex.l"
           return KW_FUNCTION; 
#line default
          }
          break;
        case 163: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 276 "DelphiLex.l"
             return TYPE_WIDESTR; 
#line default
          }
          break;
        case 86: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 144 "DelphiLex.l"
        return KW_WITH; 
#line default
          }
          break;
        case 116: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 266 "DelphiLex.l"
          return TYPE_DOUBLE; 
#line default
          }
          break;
        case 96: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 271 "DelphiLex.l"
         return TYPE_PCHAR; 
#line default
          }
          break;
        case 70: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 318 "DelphiLex.l"
           return CONST_CHAR; 
#line default
          }
          break;
        case 95: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 152 "DelphiLex.l"
         return KW_UNTIL; 
#line default
          }
          break;
        case 93: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 164 "DelphiLex.l"
         return KW_RAISE; 
#line default
          }
          break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              if (ZZ_SPURIOUS_WARNINGS_SUCK)
              { 	return ScannerEOF;
 }
              break;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
          break;
      }
    }
  }


}
#line 405 "DelphiLex.l"


}	// close outermost namespace
#line default
